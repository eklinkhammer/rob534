
==================== FINAL INTERFACE ====================
2017-01-31 20:47:04.133421 UTC

interface main@main:MyTypes 8001
  interface hash: f288534b6ca54b5c2ba89146169c24bd
  ABI hash: 5dd4d10ab2d751af6c5a0b862a753a79
  export-list hash: 195dbdb599dc4b5dff9d66057476b6f7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c4e6c57fddbe1d8308330ba9378e7853
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyTypes.getPos
  MyTypes.infinity
  MyTypes.posToState2D
  MyTypes.posToState4D
  MyTypes.AStar{MyTypes.AStar}
  MyTypes.ClosedSet
  MyTypes.DistanceFromStart
  MyTypes.DistanceToGoal
  MyTypes.Epsilon
  MyTypes.GScore
  MyTypes.Goal
  MyTypes.NumNodesExpanded
  MyTypes.OpenSet
  MyTypes.Path
  MyTypes.Pos
  MyTypes.Previous
  MyTypes.Start
  MyTypes.State{MyTypes.FourD MyTypes.TwoD}
  MyTypes.Vel
  MyTypes.WorldMap
module dependencies:
package dependencies: PSQueue-1.1@PSQueue-1.1-DNpDWrWkOL4BwO0e9gII0d
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 loop-0.3.0@loop-0.3.0-98VH1UqsOHy2KxBxA55ICY
                      matrix-0.3.5.0@matrix-0.3.5.0-Ai5MbZhiOOC3qmPfUuhoAV
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector
import  -/  PSQueue-1.1@PSQueue-1.1-DNpDWrWkOL4BwO0e9gII0d:Data.PSQueue a3e2a49a00e5a52ce02e05b59da6fdf6
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8d095ad71634b5551ba5dc1307b7f9e5
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 48e097497655818e164c2bb81a1d7b2d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  matrix-0.3.5.0@matrix-0.3.5.0-Ai5MbZhiOOC3qmPfUuhoAV:Data.Matrix a687e632fe85518f4a0d171926d72f1c
19431b7fdc9240c8026fc518c20edea2
  $fEqState :: GHC.Classes.Eq MyTypes.State
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ MyTypes.State MyTypes.$fEqState_$c== MyTypes.$fEqState_$c/= -}
06a508bb7efd16ea1f1b2f661d3817e0
  $fEqState1 :: GHC.Types.Bool
  {- Strictness: x -}
19431b7fdc9240c8026fc518c20edea2
  $fEqState_$c/= :: MyTypes.State -> MyTypes.State -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyTypes.State) (y :: MyTypes.State) ->
                 GHC.Classes.not (MyTypes.$fEqState_$c== x y)) -}
19431b7fdc9240c8026fc518c20edea2
  $fEqState_$c== :: MyTypes.State -> MyTypes.State -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: MyTypes.State) (ds1 :: MyTypes.State) ->
                 case ds of wild {
                   MyTypes.TwoD pos1
                   -> case ds1 of wild1 {
                        MyTypes.TwoD pos2
                        -> case pos1 of ww { (,) ww1 ww2 ->
                           case pos2 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { GHC.Types.I# x ->
                           case ww4 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt ww2 ww5 } } } } }
                        MyTypes.FourD ipv ipv1 -> MyTypes.$fEqState1 }
                   MyTypes.FourD pos1 vel1
                   -> case ds1 of wild1 {
                        MyTypes.TwoD ipv -> MyTypes.$fEqState1
                        MyTypes.FourD pos2 vel2
                        -> case pos1 of ww { (,) ww1 ww2 ->
                           case pos2 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { GHC.Types.I# x ->
                           case ww4 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww2 of wild5 { GHC.Types.I# x1 ->
                                case ww5 of wild6 { GHC.Types.I# y1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x1 y1) of wild7 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case vel1 of ww7 { (,) ww8 ww9 ->
                                     case vel2 of ww10 { (,) ww11 ww12 ->
                                     case ww8 of wild8 { GHC.Types.I# x2 ->
                                     case ww11 of wild9 { GHC.Types.I# y2 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==# x2 y2) of wild10 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Classes.eqInt
                                            ww9
                                            ww12 } } } } } } } } } } } } } } }) -}
19431b7fdc9240c8026fc518c20edea2
  $fOrdState :: GHC.Classes.Ord MyTypes.State
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ MyTypes.State
                  MyTypes.$fEqState
                  MyTypes.$fOrdState_$ccompare
                  MyTypes.$fOrdState_$c<
                  MyTypes.$fOrdState_$c<=
                  MyTypes.$fOrdState_$c>
                  MyTypes.$fOrdState_$c>=
                  MyTypes.$fOrdState_$cmax
                  MyTypes.$fOrdState_$cmin -}
c531fb1243ee6ecb09049f1bcacd5386
  $fOrdState1 :: GHC.Types.Bool
  {- Strictness: x -}
19431b7fdc9240c8026fc518c20edea2
  $fOrdState_$c< :: MyTypes.State -> MyTypes.State -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyTypes.State) (y :: MyTypes.State) ->
                 case MyTypes.$fEqState_$c== x y of wild {
                   GHC.Types.False -> MyTypes.$fOrdState_$c<= x y
                   GHC.Types.True -> GHC.Types.False }) -}
19431b7fdc9240c8026fc518c20edea2
  $fOrdState_$c<= :: MyTypes.State -> MyTypes.State -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: MyTypes.State) (ds1 :: MyTypes.State) ->
                 case ds of wild {
                   MyTypes.TwoD p1
                   -> case ds1 of wild1 {
                        MyTypes.TwoD p2
                        -> case p1 of ww { (,) ww1 ww2 ->
                           case p2 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { GHC.Types.I# x# ->
                           case ww4 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> GHC.Classes.leInt ww2 ww5 }
                             GHC.Types.True -> GHC.Types.True } } } } }
                        MyTypes.FourD ipv ipv1 -> MyTypes.$fOrdState1 }
                   MyTypes.FourD p1 v1
                   -> case ds1 of wild1 {
                        MyTypes.TwoD ipv -> MyTypes.$fOrdState1
                        MyTypes.FourD p2 v2
                        -> case p1 of ww { (,) ww1 ww2 ->
                           case p2 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { GHC.Types.I# x ->
                           case ww4 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False
                             -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# x y)
                             GHC.Types.True
                             -> case ww2 of wild5 { GHC.Types.I# x1 ->
                                case ww5 of wild6 { GHC.Types.I# y1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x1 y1) of wild7 {
                                  GHC.Types.False
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# x y) of wild8 {
                                       GHC.Types.False
                                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# x1 y1)
                                       GHC.Types.True -> GHC.Types.True }
                                  GHC.Types.True
                                  -> case v1 of ww7 { (,) ww8 ww9 ->
                                     case v2 of ww10 { (,) ww11 ww12 ->
                                     case ww8 of wild8 { GHC.Types.I# x# ->
                                     case ww11 of wild9 { GHC.Types.I# y# ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# x# y#) of wild10 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x# y#) of wild11 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True -> GHC.Classes.leInt ww9 ww12 }
                                       GHC.Types.True
                                       -> GHC.Types.True } } } } } } } } } } } } } } }) -}
19431b7fdc9240c8026fc518c20edea2
  $fOrdState_$c> :: MyTypes.State -> MyTypes.State -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (x :: MyTypes.State) (y :: MyTypes.State) ->
                 case MyTypes.$fEqState_$c== x y of wild {
                   GHC.Types.False
                   -> case MyTypes.$fOrdState_$c<= x y of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True -> GHC.Types.False }) -}
19431b7fdc9240c8026fc518c20edea2
  $fOrdState_$c>= :: MyTypes.State -> MyTypes.State -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (x :: MyTypes.State) (y :: MyTypes.State) ->
                 case MyTypes.$fEqState_$c== x y of wild {
                   GHC.Types.False
                   -> case MyTypes.$fOrdState_$c<= x y of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True -> GHC.Types.True }) -}
19431b7fdc9240c8026fc518c20edea2
  $fOrdState_$ccompare ::
    MyTypes.State -> MyTypes.State -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (eta :: MyTypes.State) (eta1 :: MyTypes.State) ->
                 case MyTypes.$fEqState_$c== eta eta1 of wild {
                   GHC.Types.False
                   -> case MyTypes.$fOrdState_$c<= eta eta1 of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.LT }
                   GHC.Types.True -> GHC.Types.EQ }) -}
19431b7fdc9240c8026fc518c20edea2
  $fOrdState_$cmax :: MyTypes.State -> MyTypes.State -> MyTypes.State
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyTypes.State) (y :: MyTypes.State) ->
                 case MyTypes.$fOrdState_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
19431b7fdc9240c8026fc518c20edea2
  $fOrdState_$cmin :: MyTypes.State -> MyTypes.State -> MyTypes.State
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyTypes.State) (y :: MyTypes.State) ->
                 case MyTypes.$fOrdState_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
19431b7fdc9240c8026fc518c20edea2
  $fShowState :: GHC.Show.Show MyTypes.State
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ MyTypes.State
                  MyTypes.$fShowState_$cshowsPrec
                  MyTypes.$fShowState_$cshow
                  MyTypes.$fShowState_$cshowList -}
19431b7fdc9240c8026fc518c20edea2
  $fShowState1 :: MyTypes.State -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: MyTypes.State) (w1 :: GHC.Base.String) ->
                 MyTypes.$w$cshowsPrec 0# w w1) -}
19431b7fdc9240c8026fc518c20edea2
  $fShowState_$cshow :: MyTypes.State -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyTypes.State) ->
                 MyTypes.$fShowState_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
19431b7fdc9240c8026fc518c20edea2
  $fShowState_$cshowList :: [MyTypes.State] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ MyTypes.State
                   MyTypes.$fShowState1) -}
19431b7fdc9240c8026fc518c20edea2
  $fShowState_$cshowsPrec ::
    GHC.Types.Int -> MyTypes.State -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MyTypes.State)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyTypes.$w$cshowsPrec ww1 w1 w2 }) -}
ed1a52306bf6af102b3603c3bc826f81
  $tc'AStar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16151988380973760037##
                   3523008984715241608##
                   MyTypes.$trModule
                   MyTypes.$tc'AStar1) -}
2439d8e23c41d0e8ed29e8116b371e9e
  $tc'AStar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AStar"#) -}
283e2784f74adcb412cab5fa38a641f0
  $tc'FourD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15159880349226502485##
                   14883763563527599948##
                   MyTypes.$trModule
                   MyTypes.$tc'FourD1) -}
315ac547aaa2301dd32a1e4d6c0abe00
  $tc'FourD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FourD"#) -}
8d60ce2055e7d4c73a9af8f9f95b4981
  $tc'TwoD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6413794096260122287##
                   6668499774625520437##
                   MyTypes.$trModule
                   MyTypes.$tc'TwoD1) -}
ab0f6d0dc80f02fae3fc370ddf4c4671
  $tc'TwoD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TwoD"#) -}
caa00b360a29410b1ece82e124c79312
  $tcAStar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13740637762972694690##
                   2667150212737708838##
                   MyTypes.$trModule
                   MyTypes.$tcAStar1) -}
e3f47873dbd3872b685203d8c8c3b5cc
  $tcAStar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AStar"#) -}
0cfca9a568d977b2f49d8a522f90a884
  $tcState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5160465658759714631##
                   2879391562041617215##
                   MyTypes.$trModule
                   MyTypes.$tcState1) -}
cc51d5befcfcb3ba038ba4bfcbcb29ae
  $tcState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "State"#) -}
4ab2d4bab1a488da47d40ec9b9d611cb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyTypes.$trModule2
                   MyTypes.$trModule1) -}
626d68940f8b27fed51cfdd1fdbd0f4c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyTypes"#) -}
69d7b0897f355db5b72749a9dac39444
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
19431b7fdc9240c8026fc518c20edea2
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> MyTypes.State -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
9a2df2c9b4ce0092a8a7394dac9a84e2
  data AStar
    = AStar MyTypes.OpenSet
            MyTypes.ClosedSet
            MyTypes.Previous
            MyTypes.GScore
089bd372e9ece24c4befb720db1c82da
  type ClosedSet = Data.Map.Base.Map MyTypes.State GHC.Types.Bool
fdf90e30246e77d46dd07d4681b962bc
  type DistanceFromStart = GHC.Types.Double
4e32f4d745ef67aea9c9b60663281e0e
  type DistanceToGoal = GHC.Types.Double
3d980cda70cb7ab124c6a3d4041ec3e0
  type Epsilon = GHC.Types.Double
93f80fab769e5747c2d5e5fb32a92bb2
  type GScore =
    Data.Map.Base.Map MyTypes.State MyTypes.DistanceFromStart
fd5ed33bbfb94f17e12304ee88430fac
  type Goal = MyTypes.State
66b8375e727337b8469ed26a7ae13e5c
  type NumNodesExpanded = GHC.Types.Int
879960b8d3c69570d604d0290828195b
  type OpenSet =
    Data.PSQueue.PSQ MyTypes.State MyTypes.DistanceToGoal
88cd4876bfb2c7505ce2d2bb29487509
  type Path = [MyTypes.State]
e1a0ec3abc703630039ca42c5fee8d8a
  type Pos = (GHC.Types.Int, GHC.Types.Int)
aaeed74138b81eb661d27a8b0eb2b50b
  type Previous = Data.Map.Base.Map MyTypes.State MyTypes.State
25a0a7d2be5c8b5d88c09ebbff212475
  type Start = MyTypes.State
19431b7fdc9240c8026fc518c20edea2
  data State = TwoD MyTypes.Pos | FourD MyTypes.Pos MyTypes.Vel
14ba84d9542b437f5f0d17d95f594199
  type Vel = (GHC.Types.Int, GHC.Types.Int)
5e25b2c24ca678d4d03236624112845e
  type WorldMap = Data.Matrix.Matrix GHC.Types.Int
c404ce1bed2c41129c15fab9e07d6c57
  getPos :: MyTypes.State -> MyTypes.Pos
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MyTypes.State) ->
                 case ds of wild {
                   MyTypes.TwoD pos -> pos MyTypes.FourD pos ds1 -> pos }) -}
c37dc49e8a74d0ce0f784fc81184546e
  infinity :: GHC.Types.Double
  {- Unfolding: (case GHC.Prim./## 1.0## 0.0## of wild2 { DEFAULT ->
                 GHC.Types.D# wild2 }) -}
883e7c4bab20a659351239dc741b7567
  posToState2D :: MyTypes.Pos -> MyTypes.State
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True) MyTypes.TwoD -}
e11bf26cb5ead3701ac260157b918be7
  posToState4D :: MyTypes.Pos -> MyTypes.State
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (pos :: MyTypes.Pos) ->
                 MyTypes.FourD pos MyTypes.posToState4D1) -}
d0d2ae95ee82daee4436eb0af71a7335
  posToState4D1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((MyTypes.posToState4D2, MyTypes.posToState4D2)) -}
bf1bd08718b73aaec75244971af8f95b
  posToState4D2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
instance GHC.Classes.Eq [MyTypes.State] = MyTypes.$fEqState
instance GHC.Classes.Ord [MyTypes.State] = MyTypes.$fOrdState
instance GHC.Show.Show [MyTypes.State] = MyTypes.$fShowState
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

